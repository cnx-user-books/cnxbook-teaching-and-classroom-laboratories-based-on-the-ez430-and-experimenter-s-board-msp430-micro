<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Laboratory Communications: Lab1 - Echo test using the UART mode of the USCI module</title>
  <metadata>
  <md:content-id>m23567</md:content-id><md:title>Laboratory Communications: Lab1 - Echo test using the UART mode of the USCI module</md:title>
  <md:abstract>Using the MSP-EXP430FG4618 Development Tool and the MSP430FG4618 device use the USCI module in UART mode connected to a PC’s I/O console. When the connection is established, the characters sequence writed at the console through the keyboard will be visualized on the console.</md:abstract>
  <md:uuid>07370c47-b5fc-4cb5-996b-ef0ba31b6572</md:uuid>
</metadata>

<content>
    <section id="id18250838">
      <title>Laboratory Communications: Lab1 - Echo test using the UART mode of the USCI module</title>
      <section id="id4243098">
        <title>Introduction</title>
        <para id="id3380613">The MSP430 contains built-in features for both parallel and serial data communication. This chapter describes the operation of these peripherals, and discusses the protocols, data formats and specific techniques for each type of data communication.</para>
        <para id="id19590843">The communication modules available for the MSP430 family of microcontrollers are USART (Universal Synchronous/Asynchronous Receiver/Transmitter), USCI (Universal Serial Communication Interface) and USI (Universal Serial Interface). These provide asynchronous data transmission between the MSP430 and other peripheral devices when configured in UART mode. They also support data transmission synchronized to a clock signal through a serial I/O port in Serial Peripheral Interface (SPI) and Inter Integrated Circuit (I2C) modes.</para>
      </section>
      <section id="id21511850">
        <title>Overview</title>
        <para id="id4324441">This laboratory explores the USCI module in UART mode that will be connected to a Code Composer Essentials (CCE) IO console. When the connection is established, the character sequence written on the keyboard to the console will be displayed again on the console.</para>
      </section>
      <section id="id18467606">
        <title>Resources</title>
        <para id="id18431251">This laboratory uses the USCI module in asynchronous mode. The RX interrupt activates the service routine that reads the incoming character and sends it out again to the PC (computer), allowing the instantaneous display (echo) of the written character.</para>
        <para id="id18595924">The resources used are:</para>
        <para id="id20121084">- USCI module;</para>
        <para id="id4809288">- Interrupts;</para>
        <para id="id18255224">- IO ports:</para>
        <para id="id4172568">- System clock.</para>
        <para id="id20674011">With the objective of allowing the generation of two different baud rates, a function has been added that configures the FLL+ and selects the base frequency for the UART. In this example it will be 8 MHz.</para>
      </section>
      <section id="id18127160">
        <title>Software application organization</title>
        <para id="id3354753">The proposed application (<link url="http://cnx.org/content/m23567/latest/Lab1_Comm.c" window="new"> Lab1_Comm.c</link>) is organized as shown in Figure 1. The main routine performs the necessary hardware configuration. Then, the hardware takes command of the software through the interrupt service routine generated by the reception of a new character.</para>
        <para id="id4579288">The initial configuration sets the system clock to a frequency of 8 MHz.</para>
        <figure id="id20670169">
          <title>Software application organization</title>
          <media id="id20670169_media" alt="">
            <image mime-type="image/png" src="../../media/graphics1-6e07.png" id="id20670169__onlineimage" height="365" width="500"/>
          </media>
        </figure>
      </section>
      <section id="id4214836">
        <title>System configuration</title>
        <section id="id6843465">
          <title>UART configuration</title>
          <para id="id20173175">The connection will operate in the following mode:</para>
          <para id="id20591115">- Parity disabled;</para>
          <para id="id3965705">- LSB first;</para>
          <para id="id5210418">- 8-bit data;</para>
          <para id="id21953218">- One stop bit.</para>
          <para id="id7315570">The module will operate in the following mode:</para>
          <para id="id18280620">- Asynchronous;</para>
          <para id="id20881388">- SMCLK source clock;</para>
          <para id="id20851451">- No Receive erroneous-character interrupt-enable;</para>
          <para id="id4579859">- No Receive break character interrupt-enable.</para>
          <para id="id20279333">Based on these characteristics the following control registers are configured:</para>
          <code id="id4138491" display="block">UCA0CTL0 = 0x00;
    // UCA0CTL0 =
    //UCPEN|UCPAR|UCMSB|UC7BIT|UCSPB|UCMODEx|UCSYNC|
    //UCPEN (Parity) = 0b -&gt; Parity disabled
    //UCPAR (Parity select) = 0b -&gt; Odd parity
    //UCMSB (MSB first select) = 0b -&gt; LSB first
    //UC7BIT (Character length) = 0b -&gt; 8-bit data
    //UCSPB (Stop bit select) = 0b -&gt; One stop bit
    //UCMODEx (USCI mode) = 00b -&gt; UART Mode
    //UCSYNC = 0b -&gt; Asynchronous mode
    
UCA0CTL1 = 0x81;
    // UCA0CTL1 =
    //UCSSELx|UCRXEIE|UCBRKIE|UCDORM|UCTXADDR|UCTXBRK|UCSWRST|
    //UCSSELx (USCI clock source select) = 10b -&gt; SMCLK
    //UCRXEIE = 0b -&gt; Erroneous characters rejected
    //UCBRKIE = 0b -&gt; Received break characters set
    //UCDORM = 0b -&gt; Not dormant
    //UCTXADDR = 0b -&gt; Next frame transmitted is data
    //UCTXBRK = 0b -&gt; Next frame transmitted is no break
    //UCSWRST = 1b -&gt; normally Set by a PUC
    </code>
        </section>
        <section id="id20565805">
          <title>Baud rate generation</title>
          <para id="id20651248">The module has an 8 MHz clock source and the objective is to establish a connection at 9600 Baud. It is necessary to select the baud rate generation in oversampling mode:</para>
          <code id="id20881248" display="block">UCA0BR0 = 0x34;
UCA0BR1 = 0x00;
    //Prescaler = 8MHz/(16 x 9600) = 52 = 0x34
    //9600 from 8MHz -&gt; SMCLK
    
UCA0MCTL = 0x11;
    // UCA0MCTL = UCBRFx | UCBRSx | UCOS16
    //UCBRFx (1st modulation stage) = 0001b -&gt; Table 19-4
    //UCBRSx (2nd modulation stage) = 000b -&gt; Table 19-4
    //UCOS16 (Oversampling mode) = 1b -&gt; Enabled
    </code>
        </section>
        <section id="id20172886">
          <title>Port configuration</title>
          <para id="id18407155">In order to set the external interfaces at the USCI module, it is necessary to configure the I/O ports. Select the USCI peripheral in UART mode following the connections provided on the Experimenter’s board:</para>
          <para id="id3944965">
            <code display="inline">P2SEL |= 0x30; // P2.4,P2.5 = USCI_A0 TXD,RXD</code>
          </para>
        </section>
        <section id="id4676803">
          <title>RX interrupt enable</title>
          <para id="id20155903">To finish the module configuration, it is necessary to enable the receive interrupts:</para>
          <para id="id18254482">
            <code display="inline">IE2 |= UCA0RXIE; // Enable USCI_A0 RX interrupt</code>
          </para>
        </section>
      </section>
      <section id="id3941154">
        <title>Analysis of operation</title>
        <para id="id3953178">Once the USCI module is configured in accordance with the previous steps, compile it and run it on the Experimenter’s board.</para>
        <para id="id4955657">For the correct operation, there must be a connection between the Experimenter’s board and the PC. If the CCE console is disabled, go to <emphasis>Window &gt; Show View &gt; Console</emphasis> to enable it. If necessary, configure the CCE console options in accordance to the connection details.</para>
        <para id="id4263194">Once the program code is running, any character key pressed in the PC keyboard will be displayed on the CCE console.</para>
        <para id="id6056130">This example and many others are available on the MSP430 Teaching ROM. </para>
        <para id="id22044631">Request this ROM, and our other Teaching Materials here <link url="https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp">https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp</link></para>
      </section>
    </section>
  </content>
</document>