<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Laboratory Timers: Lab1 - Memory clock with Basic Timer1</title>
  <metadata>
  <md:content-id>m23532</md:content-id><md:title>Laboratory Timers: Lab1 - Memory clock with Basic Timer1</md:title>
  <md:abstract>Using the MSP-EXP430FG4618 Development Tool and the MSP430FG4618 device implement a Memory clock with Basic Timer1.</md:abstract>
  <md:uuid>dd79437f-1287-4f24-bf9f-56d97b466e7c</md:uuid>
</metadata>
<featured-links>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit below.
       Changes to the links section in the source will not be saved. -->
    <link-group type="example">
      <link url="http://cnx.org/GroupWorkspaces/wg1386/m23532/Lab1_Timers.c/view" strength="3">Lab1_Timers.c</link>
    </link-group>
  <!-- WARNING! The 'featured-links' section is read only. Do not edit above.
       Changes to the links section in the source will not be saved. -->
</featured-links>
<content>
    <section id="id16993380">
      <title>Laboratory Timers: Lab1 - Memory clock with Basic Timer1</title>
      <section id="id18134658">
        <title>Introduction</title>
        <para id="id16176834">Correct system timing is a fundamental requirement for the proper operation of a real-time application. The timing definition can dictate how the data information processed during the execution of the application program. The clock implementations vary between devices in the MSP430 family. Each device provides different clock sources, controls and uses. This chapter discusses the clock controls included in the platforms used.
The MSP430 4xx family has two general-purpose 16-bit or 8-bit counters and event timers, named Timer_A, Timer_B, and a Basic Timer. The Basic Timer module is only implemented in â€˜4xx devices. The 2xx device family also has Timer_A and Timer_B, but the clock signals are provided by the basic clock module+.
The timers may receive an internal or external clock. Timer_A and Timer_B also include multiple independent capture and compare blocks, with interrupt capabilities.
</para>
      </section>
      <section id="id16194219">
        <title>Overview</title>
        <para id="id16852300">This laboratory implements a memory clock using the features provided by Timer1. The clock is updated once every second by the Basic Timer1 interrupt service routine (ISR). This procedure also performs switching of LED1. In order to evaluate the execution time of the routine, LED2 is kept active during the execution of the ISR. When the ISR has completed, the device goes into low power mode, until the new interrupt wakes it up.</para>
      </section>
      <section id="id18556890">
        <title>Resources</title>
        <para id="id13743454">This application (<link url="http://cnx.org/content/m23532/latest/Lab1_Timers.c" window="new"> Lab1_Timers.c</link>) sets Basic Timer1 to generate an interrupt once every second. The interrupt service routine generated by this peripheral is required to update the clock stored in memory. Moreover, it must refresh the content of the clock displayed on the LCD.</para>
        <para id="id18556732">Thus, the system resources used by this application are:</para>
        <para id="id16356893">- Basic Timer1;</para>
        <para id="id15559736">- I/O ports;</para>
        <para id="id18835475">- LCD;</para>
        <para id="id18835479">- Interrupts;</para>
        <para id="id18062171">- Low power modes.</para>
        <para id="id17969242">The default configuration of the FLL+ is used, so, all the clock signals required for the operation of the components of the device assume their default values.</para>
      </section>
      <section id="id16203682">
        <title>Software application organization</title>
        <para id="id17079459">The first task is to disable the Watchdog Timer. It should be stated that this feature, when used correctly, makes the application more robust.</para>
        <para id="id15614656">The resources needed for the LCD are all configured. This code is given, since its operation will be analysed in a later laboratory. Once the LCD configured, it is cleared by the execution of the routine <code display="inline">LCD_all_off()</code>.</para>
        <para id="id18580272">The memory clock consists of setting three global variables: hour, min, and sec, all of the type unsigned char, used to store the hours, minutes and seconds values elapsed respectively since the beginning of the execution of the application. These variables are initialized with zero values.</para>
        <para id="id18038323">The LCD is refreshed at startup to show the initial clock value.</para>
        <para id="id16361147">LED1 is used as an indicator of Basic Timer1 ISR execution. The execution time can be determined through it. In addition, LED2 state switches whenever the Basic Timer1 ISR is executed.</para>
        <para id="id16823499">The Basic Timer1 is set to generate an interrupt once every second.</para>
        <para id="id18835799">The routine <code display="inline">main()</code> ends with the interrupts global activation and puts the device in low power mode, awaiting the next interrupt.</para>
        <para id="id17929536">Basic Timer1 ISR begins by activating LED2, indicating the beginning of the routine execution and then switches the state of LED1. The counters are updated in cascade and their contents updated on the LCD, through routines <code display="inline">LCD_sec()</code>, <code display="inline">LCD_min()</code> and <code display="inline">LCD_hour()</code>. The routine ends with switching the state of the clock separation points. Finally, LED2 is turned off.</para>
      </section>
      <section id="id15636792">
        <title>System configuration</title>
        <section id="id16833886">
          <title>Watchdog Timer</title>
          <para id="id3145924">The Watchdog Timer is disabled with the objective of reducing energy consumption, but giving up the protection afforded by it. This peripheral is configured by the WDTCTL register. Its access is protected by a password. The value to disable it:</para>
          <para id="id18038232">
            <code display="inline">WDTCTL = WDTPW | WDTHOLD; // Stop WDT</code>
          </para>
          <para id="id17805785"/>
        </section>
        <section id="id18835544">
          <title>FLL+ configuration</title>
          <para id="id16142184">A 32.768 kHz crystal is applied to the oscillator LFXT1. Since it is possible to select the internal capacitors using software, the value to write to the FLL_CTL0 configuration register to select the 8 pF capacitors is:</para>
          <para id="id16195756">
            <code display="inline">FLL_CTL0 |= XCAP18PF; // Set load cap for 32k xtal</code>
          </para>
          <para id="id16396852">Taking into consideration the change mentioned earlier to the FLL+ module, what are the frequencies of each of the clock signals?</para>
          <para id="id17804273">ACLK = _________________;</para>
          <para id="id17804278">MCLK = _________________;</para>
          <para id="id17436477">SMCLK = ________________;</para>
        </section>
        <section id="id14143452">
          <title>LED ports configuration</title>
          <para id="id15315774">LED1 and LED2 are connected to ports P2.2 and P2.1 respectively. How should they be configured so that just the bits related to these ports have digital output functions?</para>
          <para id="id18992937">
            <code display="inline">P2DIR |= 0x06; // P2.2 and P2.1 as output</code>
          </para>
          <para id="id17375103">How should the P2OUT register be configured so that the application starts with LED1 on and LED2 off?</para>
          <para id="id16191936">
            <code display="inline">P2OUT |= 0x04; // LED1 on and LED2 off</code>
          </para>
        </section>
        <section id="id19028519">
          <title>Basic Timer1 configuration</title>
          <para id="id15274782">Basic Timer1 should generate an interrupt once every second. It uses two counters in series, so that the input of the BTCNT2 counter is the output of the BTCNT1 counter divided by 256. The BTCNT1 counter input is the ACLK with a 32.768 kHz frequency. If the selected output of the BTCNT2 counter is divided by 128, what is the time period associated with the Basic Timer1 interrupt? _________</para>
          <para id="id18035623"/>
          <para id="id16794995"><code id="eip-id19043139" display="block">
BTCTL = BTDIV | BT_fCLK2_DIV128; // (ACLK/256)/128
IE2 |= BTIE;                     // Enable Basic Timer1 interrupt


//*********************************************************
// BasicTimer1 Interrupt Service Routine
//*********************************************************
#pragma vector=BASICTIMER_VECTOR
__interrupt void basic_timer_ISR(void)
{
 P2OUT |=0x02;  // LED1 turn on
 P2OUT ^=0x04;  // LED2 toogle
 
 sec++;         // increment seconds 
 LCD_sec();     // refresh seconds field in LCD
 
 if (sec == 60) // one minute was pass
 {
  sec = 0;      // reset seconds counter
  min++;        // increment minutes
  LCD_min();    // refresh minutes field in LCD
 if (min == 60) // one hour was pass
 {
  min = 0;      // reset minutes counter
  hour++;       // increment  hours 
  LCD_min();    // refresh hours field in LCD
 if (hour == 24)// one day was pass
 {
  hour = 0;     // reset hours counter
 }
 }
 }
 
 if (sec &amp; 0x01) // toogle clock dots
 { 
  P3_DOT_ON;
  P5_DOT_ON;
 }
 else
 {
  P3_DOT_OFF;
  P5_DOT_OFF;
 }

 P2OUT &amp;=~0x02; // LED1 turn off
}
</code>
</para>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
        </section>
        <section id="id15603790">
          <title>Low power modes</title>
          <para id="id16285157">The task simply updates the counters periodically and refreshes the LCD contents. It is possible to configure the registers for an energy-efficient operation.</para>
          <para id="id18040465">Which low power mode should be used? _____________</para>
          <para id="id16136281">Which system clocks are activated in the low power mode selected? _________________</para>
          <para id="id16195670">
            <code display="inline">BIS_SR(LPM3_bits + GIE); // Enter LPM3 + interrupts enabled</code>
          </para>
        </section>
      </section>
      <section id="id16026915">
        <title>Analysis of operation</title>
        <section id="id18061019">
          <title>System clocks inspection</title>
          <para id="id16947648">The MCLK, SMCLK and ACLK system clocks are available at ports P1.1, P1.4 and P1.5 respectively. These ports are located on the SW2, RESET_CC and VREG_EN lines, which are available on the H2 Header pins 2, 5 and 6. All these resources are available because the Chipcon RF module is not installed and SW2 is not used.</para>
          <para id="id16991496">Using the Registers view, set bits 1, 4 and 5 of P1SEL and P1DIR registers, to choose the secondary function of these ports configured as outputs. By connecting an oscilloscope to those lines, it is possible to monitor the clock signals.</para>
          <para id="id16405442">What are the values measured for each of the system clocks?</para>
          <para id="id16153857">ACLK: ________________</para>
          <para id="id18040401">SMCLK: _______________</para>
          <para id="id16196375">MCLK: ________________</para>
        </section>
        <section id="id16415195">
          <title>ISR execution time</title>
          <para id="id16928791">The Basic Timer1 ISR execution time is fundamental to energy conservation, in order to extend the life of the system battery. The routine execution time can be measured by connecting the oscilloscope to port P2.1, which controls LED2. This output is available on pin 2 of Header H4.</para>
          <para id="id17130601">The execution time of this routine varies with the number of the counter updates and respective updates to the LCD. What are the times measured for each of these situations and what their frequencies?</para>
          <para id="id15511766">Seconds update: ______ with a time period of ______</para>
          <para id="id16365602">Seconds and minutes update: ______ with a time period of ______</para>
          <para id="id18067901">LCD fields update: ______ with a time period of ______</para>
          <para id="id15895339">If the developer chooses to update all the LCD fields at each interrupt, the time required is much greater than the solution presented. Efficient programming contributes to a reduction in the system power consumption.</para>
        </section>
        <section id="id17806182">
          <title>Measurement of electrical current drawn</title>
          <para id="id17140225">The power consumption was discussed in the previous point. The electrical power required by the system during operation is measured by replacing the jumper on the Header PWR1 by an ammeter, which indicates the electric current taken by device during operation.</para>
          <para id="id17769875">What is the value read? __________</para>
          <para id="id18833958"/>
          <para id="id18007360">This example and many others are available on the MSP430 Teaching ROM. </para>
          <para id="id18126055">Request this ROM, and our other Teaching Materials here <link url="https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp">https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp</link></para>
        </section>
      </section>
    </section>
  </content>
</document>