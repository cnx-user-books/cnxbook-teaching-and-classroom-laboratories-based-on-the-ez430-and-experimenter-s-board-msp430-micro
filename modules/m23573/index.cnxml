<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Laboratory DAC: Lab1 - Voltage ramp generator</title>
  <metadata>
  <md:content-id>m23573</md:content-id><md:title>Laboratory DAC: Lab1 - Voltage ramp generator</md:title>
  <md:abstract>Using the MSP-EXP430FG4618 Development Tool and the MSP430FG4618 device implement a voltage ramp generator Basic Timer1.</md:abstract>
  <md:uuid>0e7b3cc0-21d8-4231-963f-ad5e39de9825</md:uuid>
</metadata>

<content>
    <section id="id6645976">
      <title>Laboratory DAC: Lab1 - Voltage ramp generator</title>
      <section id="id6645428">
        <title>Introduction</title>
        <para id="id6462259">This laboratory gives an example of the use of the DAC available in the MSP-EXP430FG4618 Development Tool. The DAC module reference is obtained from the ADC module. The DAC is configured with 12 bits resolution in straight binary format. The DAC’s output value is updated every 1 msec by a Timer_A ISR. The buttons SW1 and SW2 are used to manually modify the DAC’s output.</para>
      </section>
      <section id="id6477743">
        <title>Overview</title>
        <para id="id6473832">This laboratory (
<link url="http://cnx.org/content/m23573/latest/Lab1_DAC.c" window="new"> Lab1_DAC.c</link> 

)implements a voltage ramp generator. The DAC module reference is obtained from the ADC module. The DAC is configured with 12-bit resolution, in straight binary format. The output of the DAC value is updated once every 1 msec by an interrupt service routine (ISR) generated by Timer_A. The push buttons SW1 and SW2 are used to manually modify the output of the DAC value. When the microcontroller is not performing any task, it enters low power mode.</para>
      </section>
      <section id="id6470500">
        <title>Resources</title>
        <para id="id6461732">The DAC12_0 module uses V<sub>REF+</sub> as reference voltage. It is therefore necessary to activate this reference voltage in the ADC12 module.</para>
        <para id="id6462064">The DAC12_0 is connected to Port P6.6 on the Header 8 pin 7. Connect the oscilloscope probe to this port pin.</para>
        <para id="id6462021">The output of the DAC is updated whenever Timer_A generates an interrupt. This peripheral is configured to generate an interrupt with a 1 msec time period.</para>
        <para id="id6461718">After refreshing the output of the DAC, the system returns to low power mode LPM3.</para>
        <para id="id6645859">The push buttons SW1 and SW2 allow the output of the DAC value to be changed manually.</para>
        <para id="id6645898">The resources used by the application are:</para>
        <para id="id6646128">- Timer_A;</para>
        <para id="id6144480">- DAC12;</para>
        <para id="id6144484">- I/O ports;</para>
        <para id="id6470481">- FLL+;</para>
        <para id="id6350697">- Interrupts.</para>
      </section>
      <section id="id6471882">
        <title>Software application organization</title>
        <para id="id6334721">The application starts by stopping the Watchdog Timer.</para>
        <para id="id6334726">Then, the ADC12’s reference voltage is activated and set to 2.5 V. A delay is used to allow the reference voltage to settle. During this time period, the device enters low power mode LPM0. The delay period, which is controlled by Timer_A, enables an interrupt when it completes. The interrupt wakes the device and proceeds with the execution of the application.</para>
        <para id="id6412396">Timer_A is reconfigured to generate an interrupt once every 1 msec. This interrupt service routine (ISR) updates the output of the DAC.</para>
        <para id="id6472642">Ports P1.0 and P1.1 are connected to buttons SW1 and SW2. The ports are configured as inputs with interrupt capability, such that the ISR can decode which button is pushed. If the interrupt source is due to button SW1, then the output of the DAC is increased. If the interrupt source is due to button SW2, then the output of the DAC is decreased.</para>
      </section>
      <section id="id6472626">
        <title>System configuration</title>
        <section id="id6472587">
          <title>FLL+ configuration</title>
          <code id="id6472561" display="block">FLL_CTL0 |= DCOPLUS | XCAP18PF; // DCO+ set,
                                // freq = xtal x D x N+1

SCFI0 |= FN_4; // x2 DCO freq,  // 8MHz nominal DCO

SCFQCTL = 121;                  // (121+1) x 32768 x 2 = 7.99 MHz
    </code>
        </section>
        <section id="id6472283">
          <title>Reference voltage selection</title>
          <para id="id6269291">The DAC12_0 uses the signal V<sub>REF+</sub> as reference voltage. What is the value to write to the configuration register in order to obtain the internally available reference?</para>
          <para id="id6472652">
            <code display="inline">ADC12CTL0 = REF2_5V | REFON; // Internal 2.5V ref on</code>
          </para>
          <para id="id6664230"/>
        </section>
        <section id="id6472457">
          <title>DAC12 configuration</title>
          <para id="id6645964">The DAC12_0 is configured with 12-bit resolution. The output is updated immediately when a new DAC12 data value is written in straight binary data format to the DAC12_0DAT register.</para>
          <para id="id6645795">The full-scale output must be equal to the V<sub>REF+</sub> 2.5 V internal reference voltage. Choose a compromise solution between the settling time and current consumption, by selecting a medium frequency and current for both input and output buffers. Configure the following register in order to meet these specifications:</para>
          <code id="id6645664" display="block">DAC12_0DAT = 0x00; // DAC_0 output 0V
    
DAC12_0CTL = DAC12IR | DAC12AMP_5 | DAC12ENC;
    // DAC_0 -&gt; P6.6,
    // DAC_1 -&gt; P6.7,
    // DAC reference Vref,
    // 12 bits resolution,
    // Immediate load,
    // DAC full scale output,
    // Medium speed/current,
    // Straight binary,
    // Not grouped
    </code>
        </section>
        <section id="id6646002">
          <title>Timer_A configuration</title>
          <para id="id6646009">Configure Timer_A register to enable an interrupt once every 1 msec. Use the ACLK clock signal as the clock source. This timer is configured in count up mode in order to count until the TAR value reaches the TACCR0 value.</para>
          <code id="id6411390" display="block">// Before entering in LPM0:
TACTL = TACLR | MC_1 | TASSEL_2; // up mode, SMCLK
    
// Timer_A ISR:
TAR = 0;                         // TAR reset
TACCR0 = 13600;                  // Delay to allow Ref to settle
TACCTL0 |= CCIE;                 // Compare-mode interrupt
TACTL = TACLR | MC_1 | TASSEL_2; // up mode, SMCLK

    
//*********************************************************
// ISR to TACCRO from Timer A 
//*********************************************************
#pragma vector=TIMERA0_VECTOR
__interrupt void TimerA0_ISR (void)
{
 DAC12_0DAT++; // Increase DAC's output
 if (DAC12_0DAT == 0xfff)
 DAC12_0DAT = 0; // reset DAC's output
 if (flag == 1) // if flag active exite LPM0
 { 
  flag = 0;
  LPM0_EXIT;
 } 
}   </code>
        </section>
        <section id="id6438964">
          <title>I/O Ports configuration</title>
          <para id="id6438971">Port P1 uses the bits P1.0 and P1.2 to activate the ISR whenever the push buttons SW1 and SW2 are activated (low-to-high transition).</para>
          <code id="id6438977" display="block">// SW1 and SW2 ports configuration
P1SEL &amp;= ~0x03; // P1.0 and P1.1 I/O ports
P1DIR &amp;= ~0x03; // P1.0 and P1.1 digital inputs
P1IFG = 0x00;       // clear all interrupts pending
P1IE |= 0x03;       // enable port interrupts
    </code>
          <para id="id6686821">DAC12_0 is connected to P6.6. Configure P6 as a special function output:</para>
          <code id="id6686828" display="block">// P6.6 (DAC12_0 output)
// There is no need to configure P6.6 as a
// special function output since it was configured in the
// DAC12 configuration register (DAC12_0CTL) using
// DAC12OPS = 0
    
//*********************************************************
// Port1 Interrupt Service Rotine
//*********************************************************
#pragma vector=PORT1_VECTOR
__interrupt void PORT1_ISR (void)
{
 if (P1IFG &amp; 0x01) // SW1 generate interrupt
 DAC12_0DAT += 400;    // DAC's output increases
    </code>
          <code id="id6465657" display="block">if (P1IFG &amp; 0x02) // SW2 generate interrupt
 DAC12_0DAT -= 400;   // DAC's output decreases
    </code>
          <code id="id6412522" display="block">P1IFG = 0x00; // clean all pending interrupts
}
    </code>
        </section>
      </section>
      <section id="id6459539">
        <title>Analysis of operation</title>
        <section id="id6459546">
          <title>Observe the analogue signal using an oscilloscope</title>
          <para id="id6459553">After compiling the project and starting the debug session, monitor the operation of the application using an oscilloscope probe connected to pin 7 of Header 8 (P6.6).</para>
        </section>
        <section id="id6459562">
          <title>Measure the current drawn</title>
          <para id="id6439069">Assign different values to the bits set in DAC12AMP0. Suspend the execution of the application then directly change the registers. Do not forget that this change requires suspending the operation of the DAC12 by disabling the bit DAC12ENC. Afterwards, this bit must be enabled.</para>
          <para id="id6439080">Please note the special cases relating to:</para>
          <para id="id6439084">- DAC12 off;</para>
          <para id="id6439088">- High impedance output and DAC12 off;</para>
          <para id="id6439092">- Output: 0 V.</para>
          <para id="id6439097">This example and many others are available on the MSP430 Teaching ROM. </para>
          <para id="id6649840">Request this ROM, and our other Teaching Materials here <link url="https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp">https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp</link></para>
        </section>
      </section>
    </section>
  </content>
</document>