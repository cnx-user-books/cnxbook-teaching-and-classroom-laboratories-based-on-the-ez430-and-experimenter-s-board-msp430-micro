<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Laboratory Timers: Lab3 - Memory Clock with Timer_A</title>
  <metadata>
  <md:content-id>m23530</md:content-id><md:title>Laboratory Timers: Lab3 - Memory Clock with Timer_A</md:title>
  <md:abstract>Using the MSP-EXP430FG4618 Development Tool and the MSP430FG4618 device implement a Memory Clock with Timer_A.</md:abstract>
  <md:uuid>dc9c54de-f17d-4f43-a83f-f943cc0aea17</md:uuid>
</metadata>

<content>
    <section id="id21326107">
      <title>Laboratory Timers: Lab3 - Memory Clock with Timer_A</title>
      <section id="id18446208">
        <title>Introduction</title>
        <para id="id22378061">Correct system timing is a fundamental requirement for the proper operation of a real-time application. The timing definition can dictate how the data information processed during the execution of the application program. The clock implementations vary between devices in the MSP430 family. Each device provides different clock sources, controls and uses. This chapter discusses the clock controls included in the platforms used.
The MSP430 4xx family has two general-purpose 16-bit or 8-bit counters and event timers, named Timer_A, Timer_B, and a Basic Timer. The Basic Timer module is only implemented in â€˜4xx devices. The 2xx device family also has Timer_A and Timer_B, but the clock signals are provided by the basic clock module+.
The timers may receive an internal or external clock. Timer_A and Timer_B also include multiple independent capture and compare blocks, with interrupt capabilities.
</para>
      </section>
      <section id="id22903692">
        <title>Overview</title>
        <para id="id20436849">The objective of this laboratory is to build a memory clock similar to the one that was developed using the Basic Timer1, in laboratory <emphasis effect="italics">Timers: Lab1 - Memory clock with Basic Timer1</emphasis>. Timer_A is configured to generate an interrupt once every 100 msec. The ISR manages the memory clock. LED1 and LED2 are used to monitor the operation of the system state.</para>
      </section>
      <section id="id10644279">
        <title>Resources</title>
        <para id="id9439520">This application 

(<link url="http://cnx.org/content/m23530/latest/Lab3_Timers.c" window="new"> Lab3_Timers.c </link>)
makes use of Timer_A to generate an interrupt when the value in the TACCR0 unit is reached. The ISR updates the contents of the memory clock variables.</para>
        <para id="id16627811">LED1 monitors the system operation, switching state whenever the Timer_A ISR runs. LED2 can be used to monitor the ISR execution time. The contents of the LCD is updated every interrupt. When the ISR finishes, the device returns to low power mode.</para>
        <para id="id9104838">Hence, the system resources used by this application are:</para>
        <para id="id3339850">- Timer_A;</para>
        <para id="id11160458">- I/O ports;</para>
        <para id="id15951888">- LCD;</para>
        <para id="id17726826">- Interrupts;</para>
        <para id="id18147458">- Low power modes.</para>
        <para id="id23264944">The default configuration of the FLL+ is used, so all the clock signals required for the operation of the device assume their default values.</para>
        <para id="id20305907"/>
      </section>
      <section id="id13831525">
        <title>Software application organization</title>
        <para id="id8245509">The first task is to disable the Watchdog Timer. All the resources needed for the LCD are then configured. Once configured, the LCD is cleared by the execution of the routine <code display="inline">LCD_all_off()</code>.</para>
        <para id="id20871402">The memory clock consists of three global variables: <code display="inline">min</code>, <code display="inline">sec</code>, <code display="inline">msec</code>, of the type <code display="inline">unsigned char</code>, to store the minutes, seconds and milliseconds respectively of the values elapsed since the beginning of the execution of the application. These variables are initialized with zeros.</para>
        <para id="id18514433">The LCD is refreshed at startup to display the initial clock value.</para>
        <para id="id8782679">LED2 is used as an indicator of Timer_A ISR execution. The execution time can be monitored using it. In addition, LED1 switches state whenever Timer_A ISR is executed.</para>
        <para id="id14584801">Timer_A is configured to generate an interrupt once every 100 milliseconds.</para>
        <para id="id23415222">The routine <code display="inline">main()</code> ends with a global interrupt enable and puts the device into a low power mode, where it waits for the next interrupt.</para>
        <para id="id10304021">Timer_A ISR begins by activating LED2, indicating the beginning of execution of the routine and then switches LED1 state. The counters are updated in cascade and their contents are used to update the LCD, through the routines <code display="inline">LCD_msec()</code>, <code display="inline">LCD_sec()</code> and <code display="inline">LCD_min()</code>. The routine ends by switching the state of the clock separation points. Finally, LED2 is turned off.</para>
      </section>
      <section id="id20959151">
        <title>System configuration</title>
        <section id="id24628789">
          <title>Watchdog Timer</title>
          <para id="id20763676">The Watchdog Timer is disabled with the objective of reducing energy consumption, but giving up the protection afforded by it. This peripheral is configured by the WDTCTL register. Its access is protected by a password. The value to disable it:</para>
          <para id="id10154866">
            <code display="inline">WDTCTL = WDTPW | WDTHOLD; // Stop WDT</code>
          </para>
        </section>
        <section id="id20649959">
          <title>FLL+ configuration</title>
          <para id="id22697557">A 32.768 kHz crystal is applied to the oscillator LFXT1. Since it is possible to select the internal capacitors using software, what is the value to write to the FLL_CTL0 configuration register to select the 8 pF capacitors?</para>
          <para id="id15308419">
            <code display="inline">FLL_CTL0 |= XCAP18PF; // Set load cap for 32k xtal</code>
          </para>
        </section>
        <section id="id14651529">
          <title>LED ports configuration</title>
          <para id="id23468651">LED1 and LED2 are connected to ports P2.2 and P2.1 respectively. How should they be configured so that just the bits related to these ports have digital output functions?</para>
          <para id="id11154101">
            <code display="inline">P2DIR |= 0x06; // P2.2 and P2.1 as output</code>
          </para>
          <para id="id8486715">How should the P2OUT register be configured so that the application starts with LED1 on and LED2 off?</para>
          <para id="id22369265">
            <code display="inline">P2OUT |= 0x04; // LED1 on and LED2 off</code>
          </para>
        </section>
        <section id="id5975743">
          <title>Timer_A configuration</title>
          <para id="id21671417">The Timer_A is configured to count until it reaches the value written in the TACCR0 unit. An interrupt is generated when it reaches that value. Which is the interrupt vector to use? ____________</para>
          <para id="id16810680">Timer_A clock signal is the ACLK without division. What is the value to write in the configuration register?</para>
          <para id="id21794546">
            <code display="inline">TACTL = TASSEL_1 | MC_1 | ID_0; // ACLK, up mode</code>
          </para>
          <para id="id24603194">The TACCR0 capture/compare unit determines the Timer_A counting range. For a 100 msec response, what is the value to write in the register?</para>
          <para id="id16235601">
            <code display="inline">TACCR0 = 3268; // this count corresponds to 100 msec</code>
          </para>
          <para id="id15233633"/>
          <para id="id12358936">The interrupt is configured in TACCR0 capture/compare unit. What is the value to write to the following register?</para>
          <para id="id4489478"><code id="eip-id5683413" display="block">
TACCTL0 = CCIE; // TACCR0 interrupt enabled


//*********************************************************
// Timer A ISR
//*********************************************************
#pragma vector=TIMERA0_VECTOR
__interrupt void TimerA0_ISR (void)
{	
 P2OUT |=0x02; // LED1 turn on
 P2OUT ^=0x04; // LED2 toogle
 
 msec++;
 LCD_msec();
 
 if (msec == 10)
  {
   msec = 0;
   sec++;
   LCD_sec();
 if (sec == 60)
  {
   sec = 0;
   min++;
   LCD_min();
 if (min == 60)
  {
   min = 0;
  }
  }
  }	
 
 if (sec &amp; 0x01) // toogle clock dots
  { 
   P3_DOT_ON;
   P5_DOT_ON;
  }  
 else
  {
   P3_DOT_OFF;
   P5_DOT_OFF;
  }
         
 P2OUT &amp; =~ 02; // LED1 turn off   
}



</code>
</para>
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
        </section>
        <section id="id23710806">
          <title>Low power mode</title>
          <para id="id23525914">
            <code display="inline">BIS_SR(LPM3_bits + GIE); // LPM3 with interrupts enable</code>
          </para>
        </section>
      </section>
      <section id="id22849592">
        <title>Analysis of operation</title>
        <section id="id12958148"><title>ISR execution time</title><para id="id22624426">Performing similar procedures to those described in laboratory <emphasis effect="italics">Timers: Lab1 - Memory clock with Basic Timer1</emphasis> measure the ISR execution time. What is the value measured?</para>
	<para id="id15317431">LCD refresh: ______ </para>
	<para id="id22673241">The LCD write routines were changed. Taking advantage of storing the data in the BCD format, the division operation can be ignored, resulting in the reduction of execution time of the Basic Timer1 ISR. Is the processing time required to refresh the LCD constant? _____</para>
</section>
        <section id="id22747118">
          <title>Measurement of electrical current drawn</title>
          <para id="id21189048">The power consumption was discussed in the previous point. The electrical power required by the system during operation is measured by replacing the jumper on the Header PWR1 by an ammeter, which indicates the electric current taken by device during operation.</para>
          <para id="id20978915">What is the value read? __________</para>
          <para id="id16230288">This example and many others are available on the MSP430 Teaching ROM. </para>
          <para id="id13085444">Request this ROM, and our other Teaching Materials here <link url="https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp">https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp</link></para>
        </section>
      </section>
    </section>
  </content>
</document>