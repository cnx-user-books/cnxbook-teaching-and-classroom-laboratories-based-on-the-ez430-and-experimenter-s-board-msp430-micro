<document xmlns="http://cnx.rice.edu/cnxml" xmlns:md="http://cnx.rice.edu/mdml">
  <title>Laboratory Timers: Lab5 - Frequency measurement</title>
  <metadata>
  <md:content-id>m23527</md:content-id><md:title>Laboratory Timers: Lab5 - Frequency measurement</md:title>
  <md:abstract>Using the MSP-EXP430FG4618 Development Tool and the MSP430FG4618 device perform a frequency measurement.</md:abstract>
  <md:uuid>19bc305b-888a-4bff-a8ed-88292d3c755d</md:uuid>
</metadata>

<content>
    <section id="id12484299">
      <title>Laboratory Timers: Lab5 - Frequency measurement</title>
      <section id="id6899526">
        <title>Introduction</title>
        <para id="id5633527">Correct system timing is a fundamental requirement for the proper operation of a real-time application. The timing definition can dictate how the data information processed during the execution of the application program. The clock implementations vary between devices in the MSP430 family. Each device provides different clock sources, controls and uses. This chapter discusses the clock controls included in the platforms used.</para>
        <para id="id4901012">The MSP430 4xx family has two general-purpose 16-bit or 8-bit counters and event timers, named Timer_A, Timer_B, and a Basic Timer. The Basic Timer module is only implemented in ‘4xx devices. The 2xx device family also has Timer_A and Timer_B, but the clock signals are provided by the basic clock module+.</para>
        <para id="id15218064">The timers may receive an internal or external clock. Timer_A and Timer_B also include multiple independent capture and compare blocks, with interrupt capabilities.</para>
      </section>
      <section id="id20871344">
        <title>Overview</title>
        <para id="id15204917">This laboratory implements an application

(
<link url="http://cnx.org/content/m23527/latest/Lab5_Timers.c" window="new"> Lab5_Timers.c </link>)


designed to measure a PWM signal frequency. If a signal generator is not available, the microcontroller generates a PWM signal based on the frequencies stored in a file. The frequencies generated are read and updated with a fixed time period using the features of <emphasis>CCE</emphasis>. The measured value is shown on the LCD in Hz.</para>
      </section>
      <section id="id23046134">
        <title>Resources</title>
        <para id="id20873666">The module FLL+ is configured to a frequency of 7.995392 MHz for the MCLK and SMCLK clock signals. This application performs the two tasks simultaneously.</para>
        <para id="id22940944">On the one hand, it generates a PWM signal with a frequency of 200 Hz and a duty cycle of 50%. Alternatively, the PWM signal frequency can be read from a file using a breakpoint. This function is performed by Timer_B, using the compare unit to generate the PWM signal.</para>
        <para id="id23794172">The time period between two consecutive PWM signals low-to-high transitions is measured by Timer_A. The capture unit of this timer is configured to collect the Timer_A counter register’s contents when a PWM signal low-to-high transition is detected at its input.</para>
        <para id="id22267331">The Basic Timer1 generates an interrupt once every second. The ISR updates the PWM signal frequency generated by the Timer_B. If you choose to use this feature, a breakpoint associated with this ISR execution allows reading a file with the value of the frequency that will be generated.</para>
        <para id="id20871735">The microcontroller’s ports are configured in order that the PWM signal generated by Timer_B through the TBCCR4 compare unit available at Port P3.5/TB4 can be connected to the Port P1.2/TA1 of the Timer_A TACCR1 capture unit. If you plan to use this feature, these pins must be connected together. Port P3.5 pin is available on Header 7 pin 6, while the Port P1.2 pin is available on Header H2 pin 3.</para>
        <para id="id21373555">Ports P2.1 and P2.2 are used to monitor the state of the LED2 and LED1, respectively.</para>
        <para id="id20864208">The resources used by the application are:</para>
        <para id="id20928290">- Timer_A;</para>
        <para id="id18371277">- Timer_B;</para>
        <para id="id22516114">- Basic Timer1;</para>
        <para id="id19503368">- I/O ports;</para>
        <para id="id15204923">- FLL+;</para>
        <para id="id22257011">- Interrupts.</para>
      </section>
      <section id="id3509427">
        <title>Software application organization</title>
        <para id="id19551873">The software structure allows various tasks to be performed simultaneously. The routine <code display="inline">main()</code> is responsible for configuring all the resources used by the application. Once started, the application enables all the interrupts and waits for an interrupt request.</para>
        <para id="id14956168">There are two routines that separately service the two possible interrupts. The routine <code display="inline">TimerA1_ISR()</code> services interrupts required by the Timer_A overflow and by the <emphasis>TACCR1</emphasis> capture unit. For every interrupt caused by a <emphasis>TACCR1</emphasis> capture, the value collected in the <emphasis>TACCR1</emphasis> register is stored in <emphasis>T1</emphasis>, if it is the first low-to-high transition, or stored in <emphasis>T2</emphasis> if it is the second low-to-high transition. This sequence is controlled by the variable capture. The variable flag is used to flag the measurement process. This process occurs between the capture of the first low-to-high transition and the second transition. The counting of clock pulses is done by Timer_A, in the time interval between the <emphasis>T1</emphasis> and <emphasis>T2</emphasis> acquisition, assigned to the variable <emphasis>T</emphasis>. The process is synchronized when Timer_A overflows, restarting the measurement process. The LCD is refreshed once every 0.5 seconds with the latest measured frequency value, using the control variable control tick that corresponds to 0.5 seconds.</para>
        <para id="id23905584">The routine <code display="inline">basic_timer_ISR()</code> services the interrupt produced by Basic Timer1 once every second. This routine begins by switching the state of LED1 and LED2. In addition, it updates the Timer_B counting period. The variable <code display="inline">read_data</code> allows the counting period to be changed.</para>
      </section>
      <section id="id24019740">
        <title>System configuration</title>
        <section id="id5626038">
          <title>Basic Timer1</title>
          <para id="id21436997">Basic Timer1 generates an interrupt once every second. Use the two counters in series, where the BTCNT2 counter input is selected as the BTCNT1 counter output divided by 256. The BTCNT1 counter input is the ACLK clock signal with a frequency of 32.768 kHz.</para>
          <para id="id21093442">If BTCNT2 counter selected output is divided by 128, what is the time period associated with the Basic Timer1 interrupt? _________</para>
          <para id="id20842772">The values written to the configuration registers are:</para>
          <code id="id15513304" display="block">BTCTL = BTDIV | BT_fCLK2_DIV128; // (ACLK/256)/128
IE2 |= BTIE; // Enable BT interrupt with 1 sec period
    </code>
        </section>
        <section id="id18747904">
          <title>Timer_B</title>
          <para id="id23794176">The TBCCR4 compare unit is used to generate the PWM signal. The set/reset compare mode is used.</para>
          <para id="id19482950">The values written to the configuration registers are:</para>
          <code id="id5654466" display="block">TBCTL = TBSSEL_2 | CNTL_0 | TBCLGRP_0 |MC_1 | ID_0;
// SMCLK, continuous mode
TBCCTL4 = OUTMOD_3; // CCR4 output mode 3 (set/reset)
    </code>
          <para id="id21435144">The TB4 PWM output signal has a frequency X, with a 50% duty-cycle. The SMCLK clock signal is used as input of Timer_B.</para>
          <para id="id21431136">The values written to the configuration registers are:</para>
          <code id="id20858756" display="block">TBCCR0 = 39977;// Output 200 Hz signal with 50% duty cycle
TBCCR4 = TBCCR0/2;
    </code>
          <para id="id20870663">What the largest and lowest generated frequency?</para>
          <para id="id19885224">Maximum frequency value: ____________</para>
          <para id="id19766146">Minimum frequency value: _____________</para>
        </section>
        <section id="id23944289">
          <title>Timer_A</title>
          <para id="id15887278">Timer_A is sourced by the SMCLK clock signal. It counts to the value 0xFFFF, in continuous mode. An interrupt is generated when the TAR counter overflows. What is the value to write to its configuration register?</para>
          <code id="id23885436" display="block">TACTL = TASSEL_2 |MC_2 | ID_0 | TAIE; // SMCLK
// up mode to 0xFFFF
    </code>
          <para id="id20858168">The capture unit captures the TAR register value to the TACCR1 register when it detects a low-to-high transition at the TA1 input. What is the value to write to the configuration register?</para>
          <code id="id18003081" display="block">TACCTL1 = CCIS_0 | CAP | CCIE;
// Capture on rising edge,
// TACCR1 input signal selected,
// Capture mode,
// Capture/compare interrupt enable.
    </code>
          <para id="id12236187">Determine the maximum and minimum frequency values detected. Note that these values do not take into account the execution time of the application. The PWM signals should be applied at frequencies well below the maximum value determined.</para>
          <para id="id18747414">Maximum frequency value: ____________</para>
          <para id="id18764166">Minimum frequency value: _____________</para>
          <para id="id23795217">The TACCR1 capture unit is configured to generate an interrupt when it detects a low-to-high transition. What is the value to write to the configuration register?</para>
          <para id="id20841815">
            <code display="inline">TACCTL1 |= CM1</code>
          </para>
        </section>
        <section id="id22902193">
          <title>Ports P3.5/TB4 and P1.2/TA1 configuration</title>
          <para id="id24019739">These ports perform special functions. Thus, the Port P3.5 is configured as an output, selected by the special function TB4, with the values:</para>
          <code id="id21038479" display="block">// TB4 configuration (Port3)
P3SEL = 0x20; // P3.5 as special function (TB4)
P3DIR = 0x20; // P3.5 as output
    </code>
          <para id="id19893739">The Port P1.2 is configured as input, with the special function TA1, using the values:</para>
          <code id="id13546276" display="block">// TA1 (TACCR1) configuration (Port1)
P1SEL = 0x04; // P1.2 as special function (TA1)
P1DIR = 0x00; // P1.2 as input
    </code>
        </section>
        <section id="id3423888">
          <title>I/O Ports configuration:</title>
          <code id="id15313957" display="block">// SW1 and SW2 configuration (Port1)
P1SEL &amp;= 0x00; // P1.0 and P1.2 I/O
P1DIR &amp;= 0x00; // P1.0 and P1.2 as inputs
P1IFG = 0x00;
P1IES &amp;= 0xFF // high-to-low transition interrupt
P1IE |= 0xFF; // enable port interrupts
    
// LED1 and LED2 configuration (Port2):
P2DIR |= 0x06; // P2.2 and P2.1 as outputs
P2OUT = 0x04; // LED1 on and LED2 off
    
// Buzzer port configuration (Port3)
P3SEL |= 0x20; // P3.5 as special function
P3DIR |= 0x20; // P3.5 as digital output
    </code>
        </section>
      </section>
      <section id="id8284418">
        <title>Analysis of operation</title>
        <section id="id19516012">
          <title>Run the application using the frequency generator based on Timer_B</title>
          <para id="id23873151">Without a frequency generator, the Timer_B generates a PWM signal at the TBCCR4 unit output that can be fed back to Timer_A TACCR1 capture unit input. These two pins must therefore be connected together. By default, the PWM signal frequency is 200 Hz. Add a breakpoint at the line of code belonging to the Basic Timer1 ISR to modify this value.</para>
          <para id="id5613193">
            <code display="inline">TBCCR0 = 7995392/read_data;</code>
          </para>
          <para id="id20889558">If the variable <code display="inline">read_data</code> has the value 200, it will generate a 200 Hz frequency. The value of this variable can be changed by associating a breakpoint to that line of code. Before the line of code is executed, the value of the data file is read and assigned to the variable <code display="inline">read_data</code>. The signal will oscillate at the desired frequency, loading the value in TBCCR0. The breakpoint configuration is as follows:</para>
          <para id="id3458641"/>
          <para id="id23906031"> - Action: read data from file</para>
          <para id="id23934699"> - File: address of the data file (example in freq.txt)</para>
          <para id="id4862497"> - Wrap Around: activate this option to restart reading at the beginning</para>
          <para id="id11698389"> - Start address: &amp;read_data</para>
          <para id="id3585092"> - Length: 1 in order to read a value from the file each time</para>
        </section>
        <section id="id23092204">
          <title>Run the application using a frequency generator</title>
          <para id="id19668884">The operation of the application can be verified using a frequency generator. The generator should generate a PWM signal with voltage and frequency values compatible with the device’s input (2.5 to 3.3 volts).</para>
        </section>
        <section id="id22930344">
          <title>Observe the measured frequency</title>
          <para id="id5120579">The PWM signal applied to the TA1 input can be viewed using an oscilloscope, connected to pin 3 of Header 2. Perform this task and confirm the values present at the LCD.</para>
        </section>
        <section id="id19503486">
          <title>Measurement of electrical current drawn</title>
          <para id="id22257009">The power consumption was discussed in the previous point. The electrical power required by the system during operation is measured by replacing the jumper on the Header PWR1 by an ammeter, which indicates the electric current taken by device during operation.</para>
          <para id="id22027726">What is the value read? __________</para>
          <para id="id5663447">This example and many others are available on the MSP430 Teaching ROM. </para>
          <para id="id18134334">Request this ROM, and our other Teaching Materials here <link url="https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp">https://www-a.ti.com/apps/dspuniv/teaching_rom_request.asp</link></para>
        </section>
      </section>
    </section>
  </content>
</document>